"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[8609],{8609:(g,o,t)=>{t.r(o),t.d(o,{DocsThemingModule:()=>p});var i=t(6814),s=t(1896),r=t(617),c=t(619),h=t(8662),e=t(5879),u=t(181),m=t(6734);const d=[{path:"",component:(()=>{class n{static#e=this.\u0275fac=function(a){return new(a||n)};static#t=this.\u0275cmp=e.Xpm({type:n,selectors:[["msk-docs-theming"]],decls:103,vars:4,consts:[["cdkScrollable","",1,"absolute","inset-0","flex","min-w-0","flex-col","overflow-y-auto"],[1,"flex-0","bg-card","flex","flex-col","border-b","p-6","dark:bg-transparent","sm:flex-row","sm:items-center","sm:justify-between","sm:px-10","sm:py-8"],[1,"min-w-0","flex-1"],[1,"flex","flex-wrap","items-center","space-x-1","font-medium","leading-4","rtl:space-x-reverse"],[1,"text-primary-500","whitespace-nowrap"],[1,"icon-size-4","text-secondary","mat-icon-rtl-mirror",3,"svgIcon"],[1,"text-secondary","whitespace-nowrap"],[1,"mt-2"],[1,"truncate","text-3xl","font-extrabold","leading-7","tracking-tight","sm:leading-10","md:text-4xl"],[1,"prose","prose-sm","max-w-3xl","flex-auto","p-6","sm:p-10"],["href","https://material.angular.io/guide/theming-your-components","rel","noreferrer","target","_blank"],["msk-highlight","","lang","js"],[1,"font-medium"],[3,"appearance","type"],[1,"prose","prose-sm","max-w-none","text-current"],["href","https://material.angular.io/guide/theming","rel","noreferrer","target","_blank"],[1,"mt-12"]],template:function(a,T){1&a&&(e.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"div",3)(4,"a",4),e._uU(5," Documentation "),e.qZA(),e._UZ(6,"mat-icon",5),e.TgZ(7,"a",4),e._uU(8," Guides "),e.qZA(),e._UZ(9,"mat-icon",5),e.TgZ(10,"a",6),e._uU(11," Theming "),e.qZA()(),e.TgZ(12,"div",7)(13,"h2",8),e._uU(14," Theming "),e.qZA()()()(),e.TgZ(15,"div",9)(16,"p"),e._uU(17," Since This project uses "),e.TgZ(18,"em"),e._uU(19,"Angular Material"),e.qZA(),e._uU(20," as its primary UI library, it also uses the "),e.TgZ(21,"a",10),e._uU(22,"Angular Material Theming "),e.qZA(),e._uU(23," with a twist. "),e.qZA(),e.TgZ(24,"p"),e._uU(25," Rather than using Angular Material's default theming process, this project incorporates that into Tailwind's build process. This way, you can configure your application using Tailwind's configuration file and things like colors, font families, breakpoints etc. will be carried over and applied to the Angular Material components. "),e.qZA(),e.TgZ(26,"p"),e._uU(27," You can also create color themes using Tailwind's configuration and they will also be carried over and used for building Angular Material themes. Here's an example theme configuration from Tailwind's configuration: "),e.qZA(),e.TgZ(28,"textarea",11),e._uU(29,"      // tailwind.config.js\n\n      /**\n        * Themes\n        */\n      const themes = {\n\n        // Default theme is required for theming system to work correctly\n        'default': {\n          primary  : {\n            ...colors.indigo,\n            DEFAULT: colors.indigo[600]\n          },\n          accent   : {\n            ...colors.slate,\n            DEFAULT: colors.slate[800]\n          },\n          warn     : {\n            ...colors.red,\n            DEFAULT: colors.red[600]\n          },\n          'on-warn': {\n            500: colors.red['50']\n          }\n        },\n\n        // Rest of the themes will use the 'default' as the base theme\n        // and extend them with their given configuration\n        'teal'   : {\n          primary: {\n            ...colors.teal,\n            DEFAULT: colors.teal[600]\n          }\n        },\n        'purple' : {\n          primary: {\n            ...colors.purple,\n            DEFAULT: colors.purple[600]\n          }\n        },\n        'amber'  : {\n          primary: colors.amber\n        }\n      };\n    "),e.qZA(),e.TgZ(30,"p"),e._uU(31,"Here's the general structure of a theme configuration:"),e.qZA(),e.TgZ(32,"textarea",11),e._uU(33,"      THEME_NAME: {\n        primary     : { ... },\n        accent      : { ... },\n        warn        : { ... },\n        'on-primary': { ... }\n        'on-accent' : { ... }\n        'on-warn'   : { ... }\n      }\n    "),e.qZA(),e.TgZ(34,"ul")(35,"li")(36,"p",12),e._uU(37,"primary, accent, warn"),e.qZA(),e._uU(38," These are the 3 main color palettes of the theme. They "),e.TgZ(39,"strong"),e._uU(40,"must"),e.qZA(),e._uU(41," be a Tailwind color palette. If DEFAULT is provided, that will become the main color of that palette otherwise the 500 hue level from the same palette will be used as the DEFAULT. "),e.qZA(),e.TgZ(42,"li")(43,"p",12),e._uU(44,"on-primary, on-accent, on-warn"),e.qZA(),e._uU(45,' These are the 3 main contrasting color palettes of the theme. They can be either a complete or a partial Tailwind color palette. By default, This project will automatically generate contrasting colors using the colors from "Primary", "Accent" and "Warn" palettes but for some reason, if you want more control over the contrasting colors, you can use these objects to customize them. '),e.qZA()(),e.TgZ(46,"msk-alert",13)(47,"div",14)(48,"p"),e._uU(49," Angular Material library uses 3 main color palettes and their contrasting colors to theme their components. Here we basically moved that configuration (in a customized and simplified way) into the Tailwind. "),e.qZA(),e.TgZ(50,"p"),e._uU(51," In order to have a complete understanding how Angular Material components are themed, you can check their official guides here: "),e.TgZ(52,"a",15),e._uU(53,"https://material.angular.io/guide/theming "),e.qZA()()()(),e.TgZ(54,"p",16),e._uU(55," Let's break down the 'default' theme configuration. This one is required for entire theming system and This project to work correctly: "),e.qZA(),e.TgZ(56,"textarea",11),e._uU(57,'      // tailwind.config.js\n\n      \'default\': {\n\n        // Here we define the "Primary" palette for the default theme.\n        // It uses the default "indigo" color palette from Tailwind\'s default\n        // color palettes and sets the 600 hue level as the DEFAULT color.\n        // If you omit the DEFAULT, 500 hue level will become the DEFAULT.\n        primary  : {\n          ...colors.indigo,\n          DEFAULT: colors.indigo[600]\n        },\n\n        // Here we define the "Accent" palette for the default theme.\n        // It uses the default "slate" color palette from Tailwind\'s default\n        // color palettes and sets the 800 hue level as the DEFAULT color.\n        accent   : {\n          ...colors.slate,\n          DEFAULT: colors.slate[800]\n        },\n\n        // Here we define the "Warn" palette for the default theme.\n        // It uses the default "red" color palette from Tailwind\'s default\n        // color palettes and sets the 600 hue level as the DEFAULT color.\n        warn     : {\n          ...colors.red,\n          DEFAULT: colors.red[600]\n        },\n\n        // Since we want this project to automatically generate contrasting colors\n        // for "Primary" and "Accent" palettes, we omit "on-primary" and\n        // "on-accent" objects.\n\n        // Here we define the "on-warn" palette. As you can see, it\'s not a\n        // complete palette but a partial one. this project will actually automatically\n        // generate the contrasting colors for "Warn" palette as well but it will\n        // also merge the below configuration so the contrasting color for\n        // red.500 will be red.50 from the same palette.\n        \'on-warn\': {\n          500: colors.red[\'50\']\n        }\n      }\n    '),e.qZA(),e.TgZ(58,"p",16),e._uU(59,"Let's break down the rest of the theme configuration:"),e.qZA(),e.TgZ(60,"textarea",11),e._uU(61,'      // tailwind.config.js\n\n      // All themes will inherit the configuration from the "default" theme so you\n      // can only change the palettes you want to change. Rest will be the same as\n      // the "default" palette.\n\n      // Here we have a custom theme called "teal". This one only defines the\n      // "Primary" palette and uses the "Teal" palette from the default Tailwind\n      // palettes.\n      \'teal\'   : {\n        primary: {\n          ...colors.teal,\n          DEFAULT: colors.teal[600]\n        }\n      },\n\n      // Here we have a custom theme called "purple". This one only defines the\n      // "Primary" palette and uses the "Purple" palette from the default Tailwind\n      // palettes.\n      \'purple\' : {\n        primary: {\n          ...colors.purple,\n          DEFAULT: colors.purple[600]\n        }\n      },\n\n      // Here we have a custom theme called "amber". This one only defines the\n      // "Primary" palette and uses the "Amber" palette from the default Tailwind\n      // palettes.\n      \'amber\'  : {\n        primary: colors.amber\n      }\n    '),e.qZA(),e.TgZ(62,"h2"),e._uU(63,"Color palettes"),e.qZA(),e.TgZ(64,"p"),e._uU(65," By default, Tailwind provides lots of color palettes so you can always use them to create themes. "),e.qZA(),e.TgZ(66,"p"),e._uU(67," If you have a different color that you want to use, like a brand color or a custom hand picked one, you must generate a Tailwind-like color palette in order to be able to generate themes with. There are couple ways of creating such palettes; "),e.qZA(),e.TgZ(68,"ol")(69,"li"),e._uU(70," You can create them by hand. Though this gives you complete freedom, it is by far the hardest one especially if you don't have any experience with colors and their relations. "),e.qZA(),e.TgZ(71,"li"),e._uU(72," You can use online tools to generate Tailwind color palettes. They usually do a decent job for creating palettes but they could be a little off in some cases. "),e.qZA()(),e.TgZ(73,"h2"),e._uU(74,"Setting the default theme"),e.qZA(),e.TgZ(75,"p"),e._uU(76,' By default, the "default" theme will be used as the default theme for your application. If for some reason, you want to have more than one themes and choose something other than the "default", you can do so by setting the default theme via '),e.TgZ(77,"code"),e._uU(78,"libs/client/web-app/shell/ui/layout/src/lib/layout.config.ts"),e.qZA(),e._uU(79," file. You can also change the theme runtime using the "),e.TgZ(80,"code"),e._uU(81,"MskConfigService"),e.qZA(),e._uU(82,". "),e.qZA(),e.TgZ(83,"h2"),e._uU(84,"Schemes"),e.qZA(),e.TgZ(85,"p"),e._uU(86," Every color theme you configure will automatically have 2 schemes; "),e.TgZ(87,"strong"),e._uU(88,"Light"),e.qZA(),e._uU(89," and "),e.TgZ(90,"strong"),e._uU(91,"Dark"),e.qZA(),e._uU(92,'. This way you can immediately change to a "dark" mode without losing your theme or setting up a separate "dark" theme. '),e.qZA(),e.TgZ(93,"p"),e._uU(94," You can set the default scheme via "),e.TgZ(95,"code"),e._uU(96,"libs/client/web-app/shell/ui/layout/src/lib/layout.config.ts"),e.qZA(),e._uU(97," file. You can also change the scheme runtime using the "),e.TgZ(98,"code"),e._uU(99,"MskConfigService"),e.qZA(),e._uU(100,". "),e.qZA(),e.TgZ(101,"p"),e._uU(102,' While you can set the scheme to "light" or "dark" you can also set it to "auto". "auto" mode will automatically switch between the "light" and "dark" schemes depending on the user\'s operating system\'s setting. '),e.qZA()()()),2&a&&(e.xp6(6),e.Q6J("svgIcon","heroicons_solid:chevron-right"),e.xp6(3),e.Q6J("svgIcon","heroicons_solid:chevron-right"),e.xp6(37),e.Q6J("appearance","border")("type","info"))},dependencies:[r.Hw,u.E,m.k],encapsulation:2})}return n})()}];let p=(()=>{class n{static#e=this.\u0275fac=function(a){return new(a||n)};static#t=this.\u0275mod=e.oAB({type:n});static#n=this.\u0275inj=e.cJS({imports:[i.ez,s.Bz.forChild(d),r.Ps,c.Di,h.i]})}return n})()}}]);
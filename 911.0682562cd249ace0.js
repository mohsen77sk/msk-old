"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[911],{3911:(u,n,i)=>{i.r(n),i.d(n,{DocsMediaWatcherModule:()=>l});var c=i(6814),o=i(4408),s=i(617),h=i(8662),e=i(5879),d=i(6734);const m=[{path:"",component:(()=>{class t{static#e=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275cmp=e.Xpm({type:t,selectors:[["msk-docs-media-watcher"]],decls:40,vars:2,consts:[["cdkScrollable","",1,"absolute","inset-0","flex","min-w-0","flex-col","overflow-y-auto"],[1,"flex-0","bg-card","flex","flex-col","border-b","p-6","dark:bg-transparent","sm:flex-row","sm:items-center","sm:justify-between","sm:px-10","sm:py-8"],[1,"min-w-0","flex-1"],[1,"flex","flex-wrap","items-center","space-x-1","font-medium","leading-4","rtl:space-x-reverse"],[1,"text-primary-500","whitespace-nowrap"],[1,"icon-size-4","text-secondary","mat-icon-rtl-mirror",3,"svgIcon"],[1,"text-secondary","whitespace-nowrap"],[1,"mt-2"],[1,"truncate","text-3xl","font-extrabold","leading-7","tracking-tight","sm:leading-10","md:text-4xl"],[1,"prose","prose-sm","max-w-3xl","flex-auto","p-6","sm:p-10"],["msk-highlight","","lang","typescript"]],template:function(a,p){1&a&&(e.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"div",3)(4,"a",4),e._uU(5," Documentation "),e.qZA(),e._UZ(6,"mat-icon",5),e.TgZ(7,"a",4),e._uU(8," Services "),e.qZA(),e._UZ(9,"mat-icon",5),e.TgZ(10,"a",6),e._uU(11," Media Watcher "),e.qZA()(),e.TgZ(12,"div",7)(13,"h2",8),e._uU(14," Media Watcher "),e.qZA()()()(),e.TgZ(15,"div",9)(16,"p")(17,"strong"),e._uU(18,"MskMediaWatcherService"),e.qZA(),e._uU(19," is a singleton service to watch media changes. It automatically registers the breakpoints from TailwindCSS configuration, so you can use the service without needing to configure it first. "),e.qZA(),e.TgZ(20,"h2"),e._uU(21,"Module"),e.qZA(),e.TgZ(22,"textarea",10),e._uU(23,"      import { MskMediaWatcherModule } from '@msk/client/shared/services/media-watcher';\n    "),e.qZA(),e.TgZ(24,"h2"),e._uU(25,"Methods"),e.qZA(),e.TgZ(26,"p"),e._uU(27," To watch changes on registered breakpoints, you can use the "),e.TgZ(28,"strong"),e._uU(29,"onMediaChange$"),e.qZA(),e._uU(30," getter: "),e.qZA(),e.TgZ(31,"textarea",10),e._uU(32,"      import { MskMediaWatcherService } from '@msk/client/shared/services/media-watcher';\n\n      /**\n        * Constructor\n        */\n      constructor(private _mskMediaWatcherService: MskMediaWatcherService)\n      {\n        // Subscribe to media changes\n        this._mskMediaWatcherService.onMediaChange$\n          .pipe(takeUntil(this._unsubscribeAll))\n          .subscribe(({matchingAliases}) => {\n\n            // Check if the breakpoint is 'md' and up\n            this.isScreenSmall = matchingAliases.includes('md');\n          });\n      }\n    "),e.qZA(),e.TgZ(33,"p"),e._uU(34," You can also listen for custom media queries using "),e.TgZ(35,"code"),e._uU(36,"onMediaQueryChange$(query: string)"),e.qZA(),e._uU(37," method: "),e.qZA(),e.TgZ(38,"textarea",10),e._uU(39,"      import { MskMediaWatcherService } from '@msk/client/shared/services/media-watcher';\n\n      /**\n        * Constructor\n        */\n      constructor(private _mskMediaWatcherService: MskMediaWatcherService)\n      {\n        // Subscribe to media changes\n        this._mskMediaWatcherService.onMediaQueryChange$('(min-width: 1440px)')\n          .pipe(takeUntil(this._unsubscribeAll))\n          .subscribe((state) => {\n\n            // Calculate the drawer mode\n            this.drawerMode = state.matches ? 'side' : 'over';\n          });\n      }\n    "),e.qZA()()()),2&a&&(e.xp6(6),e.Q6J("svgIcon","heroicons_solid:chevron-right"),e.xp6(3),e.Q6J("svgIcon","heroicons_solid:chevron-right"))},dependencies:[s.Hw,d.k],encapsulation:2})}return t})()}];let l=(()=>{class t{static#e=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275mod=e.oAB({type:t});static#i=this.\u0275inj=e.cJS({imports:[c.ez,o.Bz.forChild(m),s.Ps,h.i]})}return t})()}}]);
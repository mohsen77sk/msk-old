"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[5152],{5152:(u,n,i)=>{i.r(n),i.d(n,{DocsMediaWatcherModule:()=>l});var c=i(1368),o=i(2992),s=i(1560),h=i(1040),e=i(4496),d=i(9676);const m=[{path:"",component:(()=>{class t{static#e=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275cmp=e.In1({type:t,selectors:[["msk-docs-media-watcher"]],decls:40,vars:2,consts:[["cdkScrollable","",1,"absolute","inset-0","flex","min-w-0","flex-col","overflow-y-auto"],[1,"flex-0","bg-card","flex","flex-col","border-b","p-6","dark:bg-transparent","sm:flex-row","sm:items-center","sm:justify-between","sm:px-10","sm:py-8"],[1,"min-w-0","flex-1"],[1,"flex","flex-wrap","items-center","space-x-1","font-medium","leading-4","rtl:space-x-reverse"],[1,"text-primary-500","whitespace-nowrap"],[1,"icon-size-4","text-secondary","mat-icon-rtl-mirror",3,"svgIcon"],[1,"text-secondary","whitespace-nowrap"],[1,"mt-2"],[1,"truncate","text-3xl","font-extrabold","leading-7","tracking-tight","sm:leading-10","md:text-4xl"],[1,"prose","prose-sm","max-w-3xl","flex-auto","p-6","sm:p-10"],["msk-highlight","","lang","typescript"]],template:function(a,g){1&a&&(e.I0R(0,"div",0)(1,"div",1)(2,"div",2)(3,"div",3)(4,"a",4),e.OEk(5," Documentation "),e.C$Y(),e.wR5(6,"mat-icon",5),e.I0R(7,"a",4),e.OEk(8," Services "),e.C$Y(),e.wR5(9,"mat-icon",5),e.I0R(10,"a",6),e.OEk(11," Media Watcher "),e.C$Y()(),e.I0R(12,"div",7)(13,"h2",8),e.OEk(14," Media Watcher "),e.C$Y()()()(),e.I0R(15,"div",9)(16,"p")(17,"strong"),e.OEk(18,"MskMediaWatcherService"),e.C$Y(),e.OEk(19," is a singleton service to watch media changes. It automatically registers the breakpoints from TailwindCSS configuration, so you can use the service without needing to configure it first. "),e.C$Y(),e.I0R(20,"h2"),e.OEk(21,"Module"),e.C$Y(),e.I0R(22,"textarea",10),e.OEk(23,"      import { MskMediaWatcherModule } from '@msk/client/shared/services/media-watcher';\n    "),e.C$Y(),e.I0R(24,"h2"),e.OEk(25,"Methods"),e.C$Y(),e.I0R(26,"p"),e.OEk(27," To watch changes on registered breakpoints, you can use the "),e.I0R(28,"strong"),e.OEk(29,"onMediaChange$"),e.C$Y(),e.OEk(30," getter: "),e.C$Y(),e.I0R(31,"textarea",10),e.OEk(32,"      import { MskMediaWatcherService } from '@msk/client/shared/services/media-watcher';\n\n      /**\n        * Constructor\n        */\n      constructor(private _mskMediaWatcherService: MskMediaWatcherService)\n      {\n        // Subscribe to media changes\n        this._mskMediaWatcherService.onMediaChange$\n          .pipe(takeUntil(this._unsubscribeAll))\n          .subscribe(({matchingAliases}) => {\n\n            // Check if the breakpoint is 'md' and up\n            this.isScreenSmall = matchingAliases.includes('md');\n          });\n      }\n    "),e.C$Y(),e.I0R(33,"p"),e.OEk(34," You can also listen for custom media queries using "),e.I0R(35,"code"),e.OEk(36,"onMediaQueryChange$(query: string)"),e.C$Y(),e.OEk(37," method: "),e.C$Y(),e.I0R(38,"textarea",10),e.OEk(39,"      import { MskMediaWatcherService } from '@msk/client/shared/services/media-watcher';\n\n      /**\n        * Constructor\n        */\n      constructor(private _mskMediaWatcherService: MskMediaWatcherService)\n      {\n        // Subscribe to media changes\n        this._mskMediaWatcherService.onMediaQueryChange$('(min-width: 1440px)')\n          .pipe(takeUntil(this._unsubscribeAll))\n          .subscribe((state) => {\n\n            // Calculate the drawer mode\n            this.drawerMode = state.matches ? 'side' : 'over';\n          });\n      }\n    "),e.C$Y()()()),2&a&&(e.yG2(6),e.E7m("svgIcon","heroicons_solid:chevron-right"),e.yG2(3),e.E7m("svgIcon","heroicons_solid:chevron-right"))},dependencies:[s.qL,d._],encapsulation:2})}return t})()}];let l=(()=>{class t{static#e=this.\u0275fac=function(a){return new(a||t)};static#t=this.\u0275mod=e.a4G({type:t});static#i=this.\u0275inj=e.s3X({imports:[c.MD,o.qQ.forChild(m),s.oB,h.e]})}return t})()}}]);